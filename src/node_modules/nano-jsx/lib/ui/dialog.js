"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dialog = void 0;
const core_1 = require("../core");
const _config_1 = require("./_config");
const button_1 = require("./button");
class Dialog {
    constructor(options = {}) {
        this.options = options;
        this.defaultParentId = 'dialog_container';
        this.defaultActionColor = '#6200EE';
        const defaultOptions = {
            title: 'Dialog Title',
            body: 'Dialog body text.',
            actions: [
                { name: 'Action 1', color: this.defaultActionColor },
                { name: 'Action 2', color: this.defaultActionColor }
            ]
        };
        this.options = Object.assign(Object.assign({}, defaultOptions), options);
        // styles
        const styles = `
    #dialog_container {  
      background: #00000070;
      position: fixed;
      bottom: 0px;
      left: 0px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      width: 100vw;
      height: 100vh;
      overflow: hidden;
      
      z-index: ${_config_1.zIndex.dialog}

      animation-name: dialog-fadein;
      animation-duration: 0.2s;

      transition: opacity 0.2s;
      opacity: 1;
    }

    #dialog_container.dialog_fadeout {
      opacity: 0;
    } 

    #dialog_container .dialog {
      background-color: white;
      border-radius: 4px;
      min-width: 240px;
      max-width: min(500px, 80%);

      margin: 8px;

      ${_config_1.boxShadow}
    }

    #dialog_container .dialog .dialog_header {
      color: #000000DE;
      font-size: 20px;
      padding: 0px 24px 9px;
      margin: 24px 0px 6px 0px;
      line-height: 1;
    }

    #dialog_container .dialog .dialog_body {
      color: #00000099;
      font-size: 16px;  
      padding: 0px 24px 20px;
      line-height: 1.5em;
    }

    #dialog_container .dialog .dialog_actions {
      
      margin: 0;
      padding: 8px;
      
      display: flex;
      flex-direction: row;
      align-items: flex-end;
      float: right;

      flex-wrap: wrap;
      justify-content: flex-end;
    }

    #dialog_container .dialog .dialog_action {
      margin-bottom: 0px;
      margin-left: 10px;
    }

    /*#dialog_container .dialog .dialog_action:hover {
      border-radius: 4px;      
      background: #0000000a;
    }*/

    @keyframes dialog-fadein {
      from {opacity: 0;}
      to {opacity: 1;}
    }
    `;
        document.head.appendChild(core_1.h('style', {}, styles));
    }
    getParentElement(parentId) {
        let el = document.getElementById(parentId || this.defaultParentId);
        if (!el) {
            el = document.createElement('div');
            el.id = this.defaultParentId;
            document.body.appendChild(el);
        }
        return el;
    }
    remove() {
        const el = document.getElementById('dialog_container');
        if (!el)
            return;
        el.classList.add('dialog_fadeout');
        setTimeout(() => el.remove(), 200);
    }
    show(options, callback) {
        options = Object.assign(Object.assign({}, this.options), options);
        const container = this.getParentElement(options.parentId || this.defaultParentId);
        if (container.hasChildNodes())
            return;
        const Dialog = (_header, _body, _actions) => {
            const actionsArray = _actions.map((action) => {
                return core_1.h(button_1.Button, {
                    text: true,
                    color: action.color || this.defaultActionColor,
                    class: 'dialog_action',
                    // style: `color: ${action.color || this.defaultActionColor}`,
                    onClick: () => {
                        callback({ name: action.name, id: action.id });
                        this.remove();
                    }
                }, action.name.toUpperCase());
            });
            const title = core_1.h('h2', { class: 'dialog_header' }, _header);
            const body = core_1.h('div', { class: 'dialog_body' }, _body);
            const actions = core_1.h('div', { class: 'dialog_actions' }, actionsArray);
            const dialog = core_1.h('div', { class: 'dialog' }, title, body, actions);
            return dialog;
        };
        const el = Dialog(options.title, options.body, options.actions || []);
        container.appendChild(el);
        const dialog = document.getElementsByClassName('dialog')[0];
        const actions = document.getElementsByClassName('dialog_actions')[0];
        // if the actions are too long, we prefer to set flex-direction to column than to wrap the single actions
        const useColumn = dialog.clientWidth <= actions.clientWidth;
        if (useColumn)
            actions.setAttribute('style', 'flex-direction: column;');
    }
}
exports.Dialog = Dialog;
//# sourceMappingURL=dialog.js.map