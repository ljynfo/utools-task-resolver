"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Navigation = exports.NavigationAction = void 0;
const core_1 = require("../core");
const component_1 = require("../component");
const _config_1 = require("./_config");
const icon_1 = require("./icon");
const classes = {
    label: 'bottom_navigation_label',
    action: 'bottom_navigation_action',
    idPrefix: 'bottom_navigation_action_id-',
    inactive: 'bottom_navigation_action_inactive',
    initialActive: 'bottom_navigation_label_initial_active'
};
class NavigationAction extends component_1.Component {
    willMount() {
        var _a;
        this.id = (_a = this.props.id) !== null && _a !== void 0 ? _a : this.props.label.toLowerCase().replace(/\s/gm, '-').replace(/[-]+/gm, '-');
    }
    render() {
        const label = core_1.h('span', { class: classes.label }, this.props.label);
        const actionClasses = [classes.action];
        console.log(this.props.active);
        if (this.props.active)
            actionClasses.push(classes.initialActive);
        else
            actionClasses.push(classes.inactive);
        return core_1.h('div', {
            id: `${classes.idPrefix}${this.id}`,
            class: actionClasses.join(' '),
            onClick: () => {
                var _a, _b;
                if (this.props.link)
                    window.location.href = this.props.link;
                (_b = (_a = this.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, { navigate: !!this.props.link, id: this.id, label: this.props.label, component: this });
            }
        }, this.props.icon ? core_1.h(icon_1.Icon, { size: 22, style: 'margin-bottom: 2px;', src: this.props.icon }) : null, label);
    }
}
exports.NavigationAction = NavigationAction;
class Navigation extends component_1.Component {
    didMount() {
        const children = this.props.children;
        children.forEach(c => {
            c.props.onClick = e => {
                if (e.navigate)
                    return;
                const elements = document.querySelectorAll(`[id^="${classes.idPrefix}"]`);
                elements.forEach(el => {
                    if (el.id === `${classes.idPrefix}${e.id}`)
                        el.classList.remove(classes.inactive);
                    else
                        el.classList.add(classes.inactive);
                });
            };
        });
    }
    render() {
        const colors = {
            active: '#6204EE',
            inactive: '#00000070'
        };
        const styles = `
      #bottom_navigation_container {

        background-color: white;
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100vw;
        min-height: 56px;

        z-index: ${_config_1.zIndex.navigation}

        display: flex;
        justify-content: center;
        
        ${_config_1.boxShadow}
      } 

      #bottom_navigation_container .bottom_navigation_label {
        transition: font-size 0.2s;
      }

      #bottom_navigation_container .bottom_navigation_label_initial_active .bottom_navigation_label{
        animation-name: bottom_navigation_label_fontsize;
        animation-duration: 0.2s;
      }

      @keyframes bottom_navigation_label_fontsize {
        from {font-size: 12px;}
        to {font-size: 14px;}
      }

      #bottom_navigation_container .bottom_navigation_action {
        color: ${colors.active};
        font-size: 14px;

        min-width: 80px;
        max-width: 168px;
        flex-grow: 1;

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        cursor: pointer;
      }

      #bottom_navigation_container .bottom_navigation_action_inactive{
        color: ${colors.inactive};
        font-size: 12px;
      }

      #bottom_navigation_container .bottom_navigation_action_inactive i {
        background-color: ${colors.inactive}
      }
    `;
        document.head.appendChild(core_1.h('style', {}, styles));
        const { parentId, children } = this.props;
        const navigation = core_1.h('div', { id: 'bottom_navigation_container' }, children);
        if (parentId) {
            const parent = document.getElementById(parentId);
            if (parent) {
                parent.appendChild(navigation);
                return;
            }
        }
        return navigation;
    }
}
exports.Navigation = Navigation;
//# sourceMappingURL=navigation.js.map