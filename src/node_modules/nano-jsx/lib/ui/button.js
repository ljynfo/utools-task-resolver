"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
const core_1 = require("../core");
const _config_1 = require("./_config");
const _helpers_1 = require("./_helpers");
const icon_1 = require("./icon");
const Button = (props) => {
    const { children, outlined = false, text = false, background = '#6200ee', color = '#ffffff', style = '', class: className = '', icon } = props, rest = __rest(props, ["children", "outlined", "text", "background", "color", "style", "class", "icon"]);
    const normal = !(outlined || text);
    const bg = normal ? background : '#ffffff';
    const clr = normal ? color : background;
    const hoverClr = normal ? _helpers_1.lightenColor(bg, 10) : _helpers_1.lightenColor(bg, -10);
    const rippleClr = normal ? _helpers_1.lightenColor(bg, 50) : _helpers_1.lightenColor(background, 50);
    const cssHash = core_1.strToHash(outlined.toString() + text.toString() + bg + clr + style);
    const ripple = _config_1.rippleEffect(rippleClr, hoverClr);
    const styles = `
    .nano_jsx_button-${cssHash} {
      color: ${clr};
      background: ${bg};
      border-radius: 4px;
      display: inline-block;
      font-size: 14px;
      padding: 10px 16px;
      margin: 0px 0px 1em 0px;
      text-align: center;
      cursor: pointer;

      ${_config_1.userSelect}
      

      z-index: ${_config_1.zIndex.button}

      ${_config_1.boxShadow}

      border: none;
      text-transform: uppercase;
      box-shadow: 0 0 4px #999;
      outline: none;
    }

    ${ripple.styles}
  `;
    _helpers_1.addStylesToHead(styles, cssHash);
    let customStyles = '';
    if (outlined || text) {
        customStyles += 'padding-top: 9px; padding-bottom: 9px; ';
        customStyles += '-webkit-box-shadow: none; -moz-box-shadow: none; box-shadow none; ';
        if (outlined)
            customStyles += `border: 1px ${clr} solid; `;
    }
    customStyles += style;
    return core_1.h('a', Object.assign({ class: `nano_jsx_button-${cssHash} ${ripple.class} ${className}`, style: customStyles }, rest), icon ? core_1.h(icon_1.Icon, { style: 'margin-left: -4px; margin-right: 8px; width: 14px; height: 14px;' }, icon) : null, children);
};
exports.Button = Button;
//# sourceMappingURL=button.js.map