"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = exports.ListItem = void 0;
const component_1 = require("../component");
const core_1 = require("../core");
const icon_1 = require("./icon");
const _helpers_1 = require("./_helpers");
class ListItem extends component_1.Component {
    render() {
        const { props: p } = this;
        const { onClick = () => { } } = p;
        const adjustedMargin = 'margin-right: 16px;';
        const icon = p.icon ? core_1.h(icon_1.Icon, { size: 20, style: 'margin-right: 32px;', src: p.icon }) : null;
        const avatar = p.avatar
            ? core_1.h('img', { src: p.avatar, width: 40, height: 40, style: `border-radius: 20px; ${adjustedMargin}` })
            : null;
        const square = p.square ? core_1.h('img', { src: p.square, width: 56, height: 56, style: adjustedMargin }) : null;
        const image = p.image
            ? core_1.h('img', { src: p.image, width: 100, height: 56, style: 'margin-left: -16px; margin-right: 16px;' })
            : null;
        const text = core_1.h('span', null, p.children);
        // additional style for the list item
        let style = '';
        if (p.icon || p.avatar)
            style += 'min-height: 56px; ';
        if (p.square || p.image)
            style += 'min-height: 72px; ';
        return core_1.h('li', { style, onClick }, icon, avatar, square, image, text);
    }
}
exports.ListItem = ListItem;
class List extends component_1.Component {
    render() {
        const { small = false } = this.props;
        this.cssHash = core_1.strToHash(`List${small.toString()}`);
        const styles = `
      .list-${this.cssHash} ul {
        margin: 0px;
        padding: 8px 16px;
      }

      .list-${this.cssHash} ul li {
        list-style: none;
        min-height: ${small ? 32 : 46}px;
        display: flex;
        align-items: center;
        margin: 0px -16px;
        padding: 0px 16px;
        cursor: pointer;
      }

      .list-${this.cssHash} ul li span {
        font-size: 16px;
      }

      .list-${this.cssHash} ul li:hover  {
        background:#00000010
      }    
    `;
        _helpers_1.addStylesToHead(styles, this.cssHash);
        const ul = core_1.h('ul', null, this.props.children);
        return core_1.h('div', { class: `list-${this.cssHash}` }, ul);
    }
}
exports.List = List;
//# sourceMappingURL=list.js.map