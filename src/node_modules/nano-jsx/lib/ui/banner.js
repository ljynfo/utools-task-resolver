"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Banner = void 0;
const component_1 = require("../component");
const core_1 = require("../core");
const button_1 = require("./button");
const _config_1 = require("./_config");
class Banner extends component_1.Component {
    constructor() {
        super(...arguments);
        this.defaultActionColor = '#6200EE';
    }
    render() {
        const { sticky, body = 'There was a problem processing a transaction on your credit card.', actions = [
            { name: 'fix it', color: this.defaultActionColor },
            { name: 'learn more', color: this.defaultActionColor }
        ] } = this.props;
        const stickyStyles = sticky
            ? `
    position: -webkit-sticky;
    position: sticky;
    top: ${sticky}px;`
            : '';
        const styles = {
            container: `
        margin: -16px -16px 16px -16px;
        ${stickyStyles}
        z-index: ${_config_1.zIndex.banner}
        `,
            banner: `    

        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;


        background: white;
        border-bottom: 1px rgb(0 0 0 / 0.12) solid;
        min-height: 54px;`,
            body: `
        color: #000000;
        padding: 16px;
        padding-bottom: 8px;
        font-size: 16px;  
        line-height: 1.5em;`,
            actions: `
        margin: 0;
        padding: 8px;        
        display: flex;
        flex-direction: row;
        align-items: flex-end; 
        margin-left: auto;
        flex-wrap: wrap;
        justify-content: flex-end;
        `,
            action: `
        margin-bottom: 0px;
        margin-left: 10px;`
        };
        const actionsArray = actions.map((action) => {
            return core_1.h(button_1.Button, {
                text: true,
                color: action.color || this.defaultActionColor,
                style: styles.action,
                // style: `color: ${action.color || this.defaultActionColor}`,
                onClick: () => {
                    // callback({ name: action.name, id: action.id })
                    // this.remove()
                }
            }, action.name.toUpperCase());
        });
        const bodyElement = core_1.h('div', { style: styles.body }, body);
        const actionsElement = core_1.h('div', { style: styles.actions }, actionsArray);
        const bannerElement = core_1.h('div', { style: styles.banner }, bodyElement, actionsElement);
        return core_1.h('div', { style: styles.container }, bannerElement);
    }
}
exports.Banner = Banner;
//# sourceMappingURL=banner.js.map