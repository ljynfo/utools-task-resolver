var nanoJSX;
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bundles/bundle.full.ts":
/*!************************************!*\
  !*** ./src/bundles/bundle.full.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VERSION = exports.printVersion = void 0;
// core
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const lazy_1 = __webpack_require__(/*! ../lazy */ "./src/lazy.ts");
const helpers_1 = __webpack_require__(/*! ../helpers */ "./src/helpers.ts");
// useful tools
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const fragment_1 = __webpack_require__(/*! ../fragment */ "./src/fragment.ts");
const store_1 = __webpack_require__(/*! ../store */ "./src/store.ts");
const context_1 = __webpack_require__(/*! ../context */ "./src/context.ts");
// built-in components
const helmet_1 = __webpack_require__(/*! ../components/helmet */ "./src/components/helmet.ts");
const link_1 = __webpack_require__(/*! ../components/link */ "./src/components/link.ts");
const img_1 = __webpack_require__(/*! ../components/img */ "./src/components/img.ts");
const visible_1 = __webpack_require__(/*! ../components/visible */ "./src/components/visible.ts");
// tagged templates
const jsx_1 = __webpack_require__(/*! ../jsx */ "./src/jsx.ts");
// ui
const UI = __importStar(__webpack_require__(/*! ../ui/index */ "./src/ui/index.ts"));
exports.default = {
    createContext: context_1.createContext,
    h: core_1.h,
    hydrate: core_1.hydrate,
    hydrateLazy: lazy_1.hydrateLazy,
    jsx: jsx_1.jsx,
    nodeToString: helpers_1.nodeToString,
    removeAllChildNodes: core_1.removeAllChildNodes,
    render: core_1.render,
    tick: core_1.tick,
    task: helpers_1.task,
    Component: component_1.Component,
    Fragment: fragment_1.Fragment,
    Helmet: helmet_1.Helmet,
    Img: img_1.Img,
    Link: link_1.Link,
    Store: store_1.Store,
    Visible: visible_1.Visible,
    UI
};
// version
var helpers_2 = __webpack_require__(/*! ../helpers */ "./src/helpers.ts");
Object.defineProperty(exports, "printVersion", ({ enumerable: true, get: function () { return helpers_2.printVersion; } }));
var version_1 = __webpack_require__(/*! ../version */ "./src/version.ts");
Object.defineProperty(exports, "VERSION", ({ enumerable: true, get: function () { return version_1.VERSION; } }));


/***/ }),

/***/ "./src/component.ts":
/*!**************************!*\
  !*** ./src/component.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Component = void 0;
const helpers_1 = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
const core_1 = __webpack_require__(/*! ./core */ "./src/core.ts");
const state_1 = __webpack_require__(/*! ./state */ "./src/state.ts");
class Component {
    constructor(props) {
        this._elements = [];
        this._skipUnmount = false;
        this._hasUnmounted = false;
        this.props = props || {};
        this.id = this._getHash();
    }
    static isClass() {
        return true;
    }
    setState(state, shouldUpdate = false) {
        const isObject = typeof state === 'object' && state !== null;
        // if state is an object, we merge the objects
        if (isObject && this.state !== undefined)
            this.state = Object.assign(Object.assign({}, this.state), state);
        // else, we just overwrite it
        else
            this.state = state;
        if (shouldUpdate)
            this.update();
    }
    set state(state) {
        state_1._state.set(this.id, state);
    }
    get state() {
        return state_1._state.get(this.id);
    }
    set initState(state) {
        if (this.state === undefined)
            this.state = state;
    }
    /** Returns all currently rendered node elements */
    get elements() {
        return this._elements;
    }
    set elements(elements) {
        if (!Array.isArray(elements))
            elements = [elements];
        elements.forEach(element => {
            this._elements.push(element);
        });
    }
    _addNodeRemoveListener() {
        // check if didUnmount is unused
        if (/^[^{]+{\s+}$/gm.test(this.didUnmount.toString()))
            return;
        // listen if the root elements gets removed
        helpers_1.onNodeRemove(this.elements[0], () => {
            if (!this._skipUnmount)
                this._didUnmount();
        });
    }
    // @ts-ignore
    _didMount() {
        this._addNodeRemoveListener();
        this.didMount();
    }
    _didUnmount() {
        if (this._hasUnmounted)
            return;
        this.didUnmount();
        this._hasUnmounted = true;
    }
    willMount() { }
    didMount() { }
    didUnmount() { }
    render(_update) { }
    /** Will forceRender the component */
    update(update) {
        this._skipUnmount = true;
        // get all current rendered node elements
        const oldElements = [...this.elements];
        // clear
        this._elements = [];
        let el = this.render(update);
        el = core_1._render(el);
        this.elements = el;
        // console.log('old: ', oldElements)
        // console.log('new: ', this.elements)
        // get valid parent node
        const parent = oldElements[0].parentElement;
        // make sure we have a parent
        if (!parent)
            console.warn('Component needs a parent element to get updated!');
        // add all new node elements
        this.elements.forEach((child) => {
            parent.insertBefore(child, oldElements[0]);
        });
        // remove all elements
        oldElements.forEach((child) => {
            child.remove();
            // @ts-ignore
            child = null;
        });
        // listen for node removal
        this._addNodeRemoveListener();
        core_1.tick(() => {
            this._skipUnmount = false;
            if (!this.elements[0].isConnected)
                this._didUnmount();
        });
    }
    _getHash() { }
}
exports.Component = Component;


/***/ }),

/***/ "./src/components/helmet.ts":
/*!**********************************!*\
  !*** ./src/components/helmet.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Helmet = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
class Helmet extends component_1.Component {
    static SSR(body) {
        const reg = /(<helmet\b[^>]*>)((.|\n)*?)(<\/helmet>)/gm;
        // collect all elements
        const head = [];
        const footer = [];
        // get what's in the head
        if (typeof document !== 'undefined' && document.head) {
            let children = [];
            // @ts-ignore
            children = document.head.children;
            for (let i = 0; i < children.length; i++) {
                // check if the same element already exists
                if (head.indexOf(children[i]) === -1) {
                    head.push(children[i]);
                }
            }
        }
        let result;
        while ((result = reg.exec(body)) !== null) {
            const first = result[1];
            const second = result[2];
            const toHead = first.includes('data-placement="head"');
            // do not add an element if it already exists
            if (toHead && !head.includes(second))
                head.push(second);
            else if (!footer.includes(second))
                footer.push(second);
        }
        // clean the body from all matches
        const cleanBody = body.replace(reg, '');
        return { body: cleanBody, head, footer };
    }
    didMount() {
        this.props.children.forEach((element) => {
            var _a, _b, _c, _d;
            const parent = this.props.footer ? document.body : document.head;
            const tag = element.tagName;
            let attrs = [];
            // get the inner text
            attrs.push(element.innerText);
            // get all attributes
            for (let attr = 0; attr < element.attributes.length; attr++) {
                attrs.push((_a = element.attributes.item(attr)) === null || _a === void 0 ? void 0 : _a.name.toLowerCase());
                attrs.push((_b = element.attributes.item(attr)) === null || _b === void 0 ? void 0 : _b.value.toLowerCase());
            }
            // handle special tags
            if (tag === 'HTML' || tag === 'BODY') {
                const htmlTag = document.getElementsByTagName(tag)[0];
                for (let attr = 1; attr < attrs.length; attr += 2) {
                    htmlTag.setAttribute(attrs[attr], attrs[attr + 1]);
                }
                return;
            }
            else if (tag === 'TITLE') {
                const titleTags = document.getElementsByTagName('TITLE');
                if (titleTags.length > 0) {
                    const e = element;
                    titleTags[0].text = e.text;
                }
                else {
                    const titleTag = core_1.h('title', null, element.innerHTML);
                    parent.appendChild(titleTag);
                }
                return;
            }
            // check if the element already exists
            let exists = false;
            attrs = attrs.sort();
            const el = document.getElementsByTagName(tag);
            for (let i = 0; i < el.length; i++) {
                let attrs2 = [];
                // get the inner text
                attrs2.push(el[i].innerText);
                for (let attr = 0; attr < el[i].attributes.length; attr++) {
                    attrs2.push((_c = el[i].attributes.item(attr)) === null || _c === void 0 ? void 0 : _c.name.toLowerCase());
                    attrs2.push((_d = el[i].attributes.item(attr)) === null || _d === void 0 ? void 0 : _d.value.toLowerCase());
                }
                attrs2 = attrs2.sort();
                if (attrs.length > 0 && attrs2.length > 0 && JSON.stringify(attrs) === JSON.stringify(attrs2))
                    exists = true;
            }
            // add to dom
            if (!exists)
                core_1.appendChildren(parent, element);
        });
    }
    render() {
        const placement = this.props.footer ? 'footer' : 'head';
        // @ts-ignore
        const ssr = globalThis && globalThis.isSSR ? true : false;
        if (ssr)
            return core_1.h('helmet', { 'data-ssr': true, 'data-placement': placement }, this.props.children);
        else
            return [];
    }
}
exports.Helmet = Helmet;


/***/ }),

/***/ "./src/components/img.ts":
/*!*******************************!*\
  !*** ./src/components/img.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Img = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
class Img extends component_1.Component {
    constructor(props) {
        super(props);
        const { src, key } = props;
        // id has to be unique
        this.id = `${core_1.strToHash(src)}-${core_1.strToHash(JSON.stringify(props))}`;
        if (key)
            this.id += `key-${key}`;
        // this could also be done in willMount()
        if (!this.state)
            this.setState({ isLoaded: false, image: undefined });
    }
    didMount() {
        const _a = this.props, { lazy = true, placeholder, children, key, ref } = _a, rest = __rest(_a, ["lazy", "placeholder", "children", "key", "ref"]);
        if (typeof lazy === 'boolean' && lazy === false)
            return;
        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    observer.disconnect();
                    this.state.image = core_1.h('img', Object.assign({}, rest));
                    if (this.state.image.complete) {
                        this.state.isLoaded = true;
                        this.update();
                    }
                    else {
                        this.state.image.onload = () => {
                            this.state.isLoaded = true;
                            this.update();
                        };
                    }
                }
            });
        }, { threshold: [0, 1] });
        observer.observe(this.elements[0]);
    }
    render() {
        const _a = this.props, { src, placeholder, children, lazy = true, key, ref } = _a, rest = __rest(_a, ["src", "placeholder", "children", "lazy", "key", "ref"]);
        // return the img tag if not lazy loaded
        if (typeof lazy === 'boolean' && lazy === false) {
            this.state.image = core_1.h('img', Object.assign({ src }, rest));
            return this.state.image;
        }
        // if it is visible and loaded, show the image
        if (this.state.isLoaded) {
            return this.state.image;
            // if the placeholder is an image src
        }
        else if (placeholder && typeof placeholder === 'string') {
            return core_1.h('img', Object.assign({ src: placeholder }, rest));
            // if the placeholder is an JSX element
        }
        else if (placeholder && typeof placeholder === 'function') {
            return placeholder();
        }
        else {
            // render a simple box
            const style = {};
            if (rest.width)
                style.width = `${rest.width}px`;
            if (rest.height)
                style.height = `${rest.height}px`;
            const { width, height } = rest, others = __rest(rest, ["width", "height"]);
            return core_1.h('div', Object.assign({ style }, others));
        }
    }
}
exports.Img = Img;


/***/ }),

/***/ "./src/components/link.ts":
/*!********************************!*\
  !*** ./src/components/link.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Link = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const helmet_1 = __webpack_require__(/*! ./helmet */ "./src/components/helmet.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const fragment_1 = __webpack_require__(/*! ../fragment */ "./src/fragment.ts");
/**
 * A simple Link component
 * Add <Link prefetch ..., to prefetch the html document
 * Add <Link prefetch="hover" ..., to prefetch the html document on hovering over the link element.
 */
class Link extends component_1.Component {
    prefetchOnHover() {
        this.elements[0].addEventListener('mouseover', () => this.addPrefetch(), { once: true });
    }
    prefetchOnVisible() {
        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    observer.disconnect();
                    this.addPrefetch();
                }
            });
        }, { threshold: [0, 1] });
        observer.observe(this.elements[0]);
    }
    addPrefetch() {
        let doesAlreadyExist = false;
        // check if it is already on the dom
        const links = document.getElementsByTagName('link');
        for (let i = 0; i < links.length; i++) {
            // if it is not already on the dom, add it
            if (links[i].getAttribute('rel') === 'prefetch' && links[i].getAttribute('href') === this.props.href) {
                doesAlreadyExist = true;
            }
        }
        if (!doesAlreadyExist) {
            const prefetch = core_1.h('link', { rel: 'prefetch', href: this.props.href, as: 'document' });
            document.head.appendChild(prefetch);
        }
    }
    didMount() {
        const { href, prefetch, delay = 0, back = false } = this.props;
        if (back)
            this.elements[0].addEventListener('click', (e) => {
                e.preventDefault();
                const target = e.target;
                if (target.href === document.referrer)
                    window.history.back();
                else
                    window.location.href = target.href;
            });
        if (delay > 0)
            this.elements[0].addEventListener('click', (e) => {
                e.preventDefault();
                setTimeout(() => (window.location.href = href), delay);
            });
        if (prefetch) {
            if (prefetch === 'hover')
                this.prefetchOnHover();
            else if (prefetch === 'visible')
                this.prefetchOnVisible();
            else
                this.addPrefetch();
        }
    }
    render() {
        // separate children and prefetch from props
        const _a = this.props, { children, prefetch, back, ref } = _a, rest = __rest(_a, ["children", "prefetch", "back", "ref"]);
        // some warning messages
        if (!this.props.href)
            console.warn('Please add "href" to <Link>');
        if (children.length !== 1)
            console.warn('Please add ONE child to <Link> (<Link>child</Link>)');
        const a = core_1.h('a', Object.assign({}, rest), ...children);
        // if ssr
        if (prefetch === true && !(typeof window !== 'undefined' && window.document)) {
            // <link rel="prefetch" href="/index.html" as="document"></link>
            const link = core_1.h('link', { rel: 'prefetch', href: this.props.href, as: 'document' });
            const helmet = core_1.h(helmet_1.Helmet, null, link);
            return core_1.h(fragment_1.Fragment, null, [helmet, a]);
        }
        // if not ssr
        else {
            return a;
        }
    }
}
exports.Link = Link;


/***/ }),

/***/ "./src/components/visible.ts":
/*!***********************************!*\
  !*** ./src/components/visible.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Visible = void 0;
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
class Visible extends component_1.Component {
    constructor() {
        super(...arguments);
        this.isVisible = false;
    }
    didMount() {
        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    observer.disconnect();
                    this.isVisible = true;
                    this.update();
                }
            });
        }, { threshold: [0, 1] });
        observer.observe(this.elements[0]);
    }
    render() {
        if (!this.isVisible) {
            return core_1.h('div', { 'data-visible': false, visibility: 'hidden' });
        }
        else {
            if (this.props.onVisible)
                this.props.onVisible();
            return core_1.render(this.props.component || this.props.children[0]);
        }
    }
}
exports.Visible = Visible;


/***/ }),

/***/ "./src/context.ts":
/*!************************!*\
  !*** ./src/context.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createContext = void 0;
const createContext = (ctx) => {
    let _ctx = ctx;
    return {
        Provider: (props) => {
            if (props.value)
                _ctx = props.value;
            return props.children;
        },
        Consumer: (props) => {
            return { component: props.children[0](_ctx), props: Object.assign(Object.assign({}, props), { context: _ctx }) };
        },
        get: () => _ctx,
        set: (ctx) => (_ctx = ctx)
    };
};
exports.createContext = createContext;


/***/ }),

/***/ "./src/core.ts":
/*!*********************!*\
  !*** ./src/core.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.h = exports.renderComponent = exports._render = exports.render = exports.hydrate = exports.appendChildren = exports.strToHash = exports.removeAllChildNodes = exports.tick = void 0;
/** Creates a new Microtask using Promise() */
exports.tick = typeof Promise == 'function' ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout;
// const isDOMElement = (element: any) => {
//   return element && element.tagName && typeof element.tagName === 'string'
// }
const removeAllChildNodes = (parent) => {
    while (parent.firstChild) {
        parent.removeChild(parent.firstChild);
    }
};
exports.removeAllChildNodes = removeAllChildNodes;
// https://stackoverflow.com/a/7616484/12656855
const strToHash = (s) => {
    let hash = 0;
    for (let i = 0; i < s.length; i++) {
        const chr = s.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return Math.abs(hash).toString(32);
};
exports.strToHash = strToHash;
const appendChildren = (element, children) => {
    // if the child is an html element
    if (!Array.isArray(children)) {
        exports.appendChildren(element, [children]);
        return;
    }
    // htmlCollection to array
    if (typeof children === 'object')
        children = Array.prototype.slice.call(children);
    children.forEach((child) => {
        // if child is an array of children, append them instead
        if (Array.isArray(child))
            exports.appendChildren(element, child);
        else {
            // render the component
            const c = exports._render(child);
            if (typeof c !== 'undefined') {
                // if c is an array of children, append them instead
                if (Array.isArray(c))
                    exports.appendChildren(element, c);
                // apply the component to parent element
                else
                    element.appendChild(c.nodeType == null ? document.createTextNode(c.toString()) : c);
            }
        }
    });
};
exports.appendChildren = appendChildren;
/**
 * A simple component for rendering SVGs
 */
const SVG = (props) => {
    const child = props.children[0];
    const attrs = child.attributes;
    const svg = hNS('svg');
    for (let i = attrs.length - 1; i >= 0; i--) {
        svg.setAttribute(attrs[i].name, attrs[i].value);
    }
    svg.innerHTML = child.innerHTML;
    return svg;
};
const hydrate = (component, parent = null, removeChildNodes = true) => {
    return exports.render(component, parent, removeChildNodes);
};
exports.hydrate = hydrate;
/** Returns the populated parent if available else  one child or an array of children */
const render = (component, parent = null, removeChildNodes = true) => {
    let el = exports._render(component);
    if (Array.isArray(el)) {
        el = el.map(e => exports._render(e));
        if (el.length === 1)
            el = el[0];
    }
    if (parent) {
        if (removeChildNodes)
            exports.removeAllChildNodes(parent);
        // if parent and child are the same, we replace the parent instead of appending to it
        if (el && parent.id && parent.id === el.id && parent.parentElement) {
            parent.parentElement.replaceChild(el, parent);
        }
        else {
            // append element(s) to the parent
            if (Array.isArray(el))
                el.forEach((e) => {
                    exports.appendChildren(parent, exports._render(e));
                    //parent.appendChild(_render(e))
                });
            else
                exports.appendChildren(parent, exports._render(el));
        }
        // @ts-ignore
        if (parent.ssr)
            return parent.ssr;
        return parent;
    }
    // returning one child or an array of children
    else {
        if (typeof isSSR === 'boolean' && isSSR === true && !Array.isArray(el))
            return [el];
        return el;
    }
};
exports.render = render;
const _render = (comp) => {
    // undefined
    if (typeof comp === 'undefined')
        return [];
    // null
    if (comp == null)
        return [];
    // string
    if (typeof comp === 'string')
        return comp;
    // number
    if (typeof comp === 'number')
        return comp.toString();
    // SVGElement
    if (comp.tagName && comp.tagName.toLowerCase() === 'svg')
        return SVG({ children: [comp] });
    // HTMLElement
    if (comp.tagName)
        return comp;
    // Class Component
    if (comp && comp.component && comp.component.isClass && comp.component.isClass())
        return renderClassComponent(comp);
    // Functional Component
    if (comp.component && typeof comp.component === 'function')
        return renderFunctionalComponent(comp);
    // Array (render each child and return the array) (is probably a fragment)
    if (Array.isArray(comp))
        return comp.map(c => exports._render(c)).flat();
    // function
    if (typeof comp === 'function')
        return exports._render(comp());
    // if component is a HTMLElement (rare case)
    if (comp.component && comp.component.tagName && typeof comp.component.tagName === 'string')
        return exports._render(comp.component);
    // (rare case)
    if (Array.isArray(comp.component))
        return exports._render(comp.component);
    // (rare case)
    if (comp.component)
        return exports._render(comp.component);
    // object
    if (typeof comp === 'object')
        return [];
    console.warn('Something unexpected happened with:', comp);
};
exports._render = _render;
const renderFunctionalComponent = (fncComp) => {
    const { component, props } = fncComp;
    return exports._render(component(props));
};
const renderClassComponent = (classComp) => {
    const { component, props } = classComp;
    // calc hash
    const hash = exports.strToHash(component.toString());
    // make hash accessible in constructor, without passing it to it
    component.prototype._getHash = () => hash;
    const Component = new component(props);
    Component.willMount();
    let el = Component.render();
    el = exports._render(el);
    Component.elements = el;
    // pass the component instance as ref
    if (props && props.ref)
        props.ref(Component);
    if (typeof isSSR === 'undefined')
        exports.tick(() => {
            Component._didMount();
        });
    return el;
};
/** @deprecated renderComponent() is deprecated, use _render() instead! */
const renderComponent = (_component) => {
    console.warn('DEPRECATED: renderComponent() is deprecated, use _render() instead!');
    // this fixes some ssr issues when using fragments
    // if (typeof isSSR === 'boolean' && isSSR === true && Array.isArray(el)) {
    //   el = el
    //     .map((e) => {
    //       return _render(e)
    //     })
    //     .join('')
    // }
};
exports.renderComponent = renderComponent;
const hNS = (tag) => document.createElementNS('http://www.w3.org/2000/svg', tag);
// https://stackoverflow.com/a/42405694/12656855
const h = (tagNameOrComponent, props, ...children) => {
    // if tagNameOrComponent is a component
    if (typeof tagNameOrComponent !== 'string')
        return { component: tagNameOrComponent, props: Object.assign(Object.assign({}, props), { children: children }) };
    let ref;
    const element = tagNameOrComponent === 'svg'
        ? hNS('svg')
        : document.createElement(tagNameOrComponent);
    // check if the element includes the event (for example 'oninput')
    const isEvent = (el, p) => {
        // check if the event begins with 'on'
        if (0 !== p.indexOf('on'))
            return false;
        // we return true if SSR, since otherwise it will get rendered
        if (el.ssr)
            return true;
        // check if the event is present in the element as object (null) or as function
        return typeof el[p] === 'object' || typeof el[p] === 'function';
    };
    for (const p in props) {
        // https://stackoverflow.com/a/45205645/12656855
        // style object to style string
        if (p === 'style' && typeof props[p] === 'object') {
            const styles = Object.keys(props[p])
                .map(k => `${k}:${props[p][k]}`)
                .join(';')
                .replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);
            props[p] = `${styles};`;
        }
        // handel ref
        if (p === 'ref')
            ref = props[p];
        // handle events
        else if (isEvent(element, p.toLowerCase()))
            element.addEventListener(p.toLowerCase().substring(2), (e) => props[p](e));
        else if (/className/i.test(p))
            console.warn('You can use "class" instead of "className".');
        else
            element.setAttribute(p, props[p]);
    }
    exports.appendChildren(element, children);
    if (ref)
        ref(element);
    // @ts-ignore
    if (element.ssr)
        return element.ssr;
    return element;
};
exports.h = h;


/***/ }),

/***/ "./src/fragment.ts":
/*!*************************!*\
  !*** ./src/fragment.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Fragment = void 0;
const Fragment = (props) => {
    return props.children;
};
exports.Fragment = Fragment;


/***/ }),

/***/ "./src/helpers.ts":
/*!************************!*\
  !*** ./src/helpers.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printVersion = exports.onNodeRemove = exports.nodeToString = exports.task = void 0;
const version_1 = __webpack_require__(/*! ./version */ "./src/version.ts");
/** Creates a new Task using setTimeout() */
const task = (task) => setTimeout(task, 0);
exports.task = task;
const nodeToString = (node) => {
    const tmpNode = document.createElement('div');
    tmpNode.appendChild(node.cloneNode(true));
    return tmpNode.innerHTML;
};
exports.nodeToString = nodeToString;
const isDescendant = (desc, root) => {
    return !!desc && (desc === root || isDescendant(desc.parentNode, root));
};
// https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
const onNodeRemove = (element, callback) => {
    let observer = new MutationObserver(mutationsList => {
        mutationsList.forEach(mutation => {
            mutation.removedNodes.forEach(removed => {
                if (isDescendant(element, removed)) {
                    callback();
                    if (observer) {
                        // allow garbage collection
                        observer.disconnect();
                        // @ts-ignore
                        observer = undefined;
                    }
                }
            });
        });
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
};
exports.onNodeRemove = onNodeRemove;
const printVersion = () => {
    const info = `Powered by nano JSX v${version_1.VERSION}`;
    console.log(`%c %c %c %c %c ${info} %c http://nanojsx.io`, 'background: #ff0000', 'background: #ffff00', 'background: #00ff00', 'background: #00ffff', 'color: #fff; background: #000000;', 'background: none');
};
exports.printVersion = printVersion;


/***/ }),

/***/ "./src/htm.ts":
/*!********************!*\
  !*** ./src/htm.ts ***!
  \********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const index_1 = __importDefault(__webpack_require__(/*! ./htm/index */ "./src/htm/index.ts"));
exports.default = index_1.default;


/***/ }),

/***/ "./src/htm/build.ts":
/*!**************************!*\
  !*** ./src/htm/build.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.build = exports.evaluate = exports.treeify = void 0;
const constants_1 = __webpack_require__(/*! ./constants */ "./src/htm/constants.ts");
const MODE_SLASH = 0;
const MODE_TEXT = 1;
const MODE_WHITESPACE = 2;
const MODE_TAGNAME = 3;
const MODE_COMMENT = 4;
const MODE_PROP_SET = 5;
const MODE_PROP_APPEND = 6;
const CHILD_APPEND = 0;
const CHILD_RECURSE = 2;
const TAG_SET = 3;
const PROPS_ASSIGN = 4;
const PROP_SET = MODE_PROP_SET;
const PROP_APPEND = MODE_PROP_APPEND;
// Turn a result of a build(...) call into a tree that is more
// convenient to analyze and transform (e.g. Babel plugins).
// For example:
// 	treeify(
//		build'<div href="1${a}" ...${b}><${x} /></div>`,
//		[X, Y, Z]
//	)
// returns:
// 	{
// 		tag: 'div',
//		props: [ { href: ["1", X] },	Y ],
// 		children: [ { tag: Z, props: [], children: [] } ]
// 	}
const treeify = (built, fields) => {
    const _treeify = (built) => {
        let tag = '';
        let currentProps = null;
        const props = [];
        const children = [];
        for (let i = 1; i < built.length; i++) {
            const type = built[i++];
            const value = built[i] ? fields[built[i++] - 1] : built[++i];
            if (type === TAG_SET) {
                tag = value;
            }
            else if (type === PROPS_ASSIGN) {
                props.push(value);
                currentProps = null;
            }
            else if (type === PROP_SET) {
                if (!currentProps) {
                    currentProps = Object.create(null);
                    props.push(currentProps);
                }
                currentProps[built[++i]] = [value];
            }
            else if (type === PROP_APPEND) {
                currentProps[built[++i]].push(value);
            }
            else if (type === CHILD_RECURSE) {
                children.push(_treeify(value));
            }
            else if (type === CHILD_APPEND) {
                children.push(value);
            }
        }
        return { tag, props, children };
    };
    const { children } = _treeify(built);
    return children.length > 1 ? children : children[0];
};
exports.treeify = treeify;
const evaluate = (h, built, fields, args) => {
    let tmp;
    // `build()` used the first element of the operation list as
    // temporary workspace. Now that `build()` is done we can use
    // that space to track whether the current element is "dynamic"
    // (i.e. it or any of its descendants depend on dynamic values).
    built[0] = 0;
    for (let i = 1; i < built.length; i++) {
        const type = built[i++];
        // Set `built[0]`'s appropriate bits if this element depends on a dynamic value.
        const value = built[i] ? ((built[0] |= type ? 1 : 2), fields[built[i++]]) : built[++i];
        if (type === TAG_SET) {
            args[0] = value;
        }
        else if (type === PROPS_ASSIGN) {
            args[1] = Object.assign(args[1] || {}, value);
        }
        else if (type === PROP_SET) {
            ;
            (args[1] = args[1] || {})[built[++i]] = value;
        }
        else if (type === PROP_APPEND) {
            args[1][built[++i]] += `${value}`;
        }
        else if (type) {
            // type === CHILD_RECURSE
            // Set the operation list (including the staticness bits) as
            // `this` for the `h` call.
            tmp = h.apply(value, exports.evaluate(h, value, fields, ['', null]));
            args.push(tmp);
            if (value[0]) {
                // Set the 2nd lowest bit it the child element is dynamic.
                built[0] |= 2;
            }
            else {
                // Rewrite the operation list in-place if the child element is static.
                // The currently evaluated piece `CHILD_RECURSE, 0, [...]` becomes
                // `CHILD_APPEND, 0, tmp`.
                // Essentially the operation list gets optimized for potential future
                // re-evaluations.
                built[i - 2] = CHILD_APPEND;
                built[i] = tmp;
            }
        }
        else {
            // type === CHILD_APPEND
            args.push(value);
        }
    }
    return args;
};
exports.evaluate = evaluate;
const build = function (statics, ...rest) {
    const fields = [statics, ...rest];
    // @ts-ignore
    const h = this;
    let mode = MODE_TEXT;
    let buffer = '';
    let quote = '';
    let current = [0];
    let char;
    let propName;
    const commit = (field) => {
        if (mode === MODE_TEXT && (field || (buffer = buffer.replace(/^\s*\n\s*|\s*\n\s*$/g, '')))) {
            if (constants_1.MINI) {
                current.push(field ? fields[field] : buffer);
            }
            else {
                current.push(CHILD_APPEND, field, buffer);
            }
        }
        else if (mode === MODE_TAGNAME && (field || buffer)) {
            if (constants_1.MINI) {
                current[1] = field ? fields[field] : buffer;
            }
            else {
                current.push(TAG_SET, field, buffer);
            }
            mode = MODE_WHITESPACE;
        }
        else if (mode === MODE_WHITESPACE && buffer === '...' && field) {
            if (constants_1.MINI) {
                current[2] = Object.assign(current[2] || {}, fields[field]);
            }
            else {
                current.push(PROPS_ASSIGN, field, 0);
            }
        }
        else if (mode === MODE_WHITESPACE && buffer && !field) {
            if (constants_1.MINI) {
                ;
                (current[2] = current[2] || {})[buffer] = true;
            }
            else {
                current.push(PROP_SET, 0, true, buffer);
            }
        }
        else if (mode >= MODE_PROP_SET) {
            if (constants_1.MINI) {
                if (mode === MODE_PROP_SET) {
                    ;
                    (current[2] = current[2] || {})[propName] = field
                        ? buffer
                            ? buffer + fields[field]
                            : fields[field]
                        : buffer;
                    mode = MODE_PROP_APPEND;
                }
                else if (field || buffer) {
                    current[2][propName] += field ? buffer + fields[field] : buffer;
                }
            }
            else {
                if (buffer || (!field && mode === MODE_PROP_SET)) {
                    current.push(mode, 0, buffer, propName);
                    mode = MODE_PROP_APPEND;
                }
                if (field) {
                    current.push(mode, field, 0, propName);
                    mode = MODE_PROP_APPEND;
                }
            }
        }
        buffer = '';
    };
    for (let i = 0; i < statics.length; i++) {
        if (i) {
            if (mode === MODE_TEXT) {
                commit();
            }
            commit(i);
        }
        for (let j = 0; j < statics[i].length; j++) {
            char = statics[i][j];
            if (mode === MODE_TEXT) {
                if (char === '<') {
                    // commit buffer
                    commit();
                    if (constants_1.MINI) {
                        current = [current, '', null];
                    }
                    else {
                        current = [current];
                    }
                    mode = MODE_TAGNAME;
                }
                else {
                    buffer += char;
                }
            }
            else if (mode === MODE_COMMENT) {
                // Ignore everything until the last three characters are '-', '-' and '>'
                if (buffer === '--' && char === '>') {
                    mode = MODE_TEXT;
                    buffer = '';
                }
                else {
                    buffer = char + buffer[0];
                }
            }
            else if (quote) {
                if (char === quote) {
                    quote = '';
                }
                else {
                    buffer += char;
                }
            }
            else if (char === '"' || char === "'") {
                quote = char;
            }
            else if (char === '>') {
                commit();
                mode = MODE_TEXT;
            }
            else if (!mode) {
                // Ignore everything until the tag ends
            }
            else if (char === '=') {
                mode = MODE_PROP_SET;
                propName = buffer;
                buffer = '';
            }
            else if (char === '/' && (mode < MODE_PROP_SET || statics[i][j + 1] === '>')) {
                commit();
                if (mode === MODE_TAGNAME) {
                    current = current[0];
                }
                mode = current;
                if (constants_1.MINI) {
                    ;
                    (current = current[0]).push(h(...mode.slice(1)));
                }
                else {
                    ;
                    (current = current[0]).push(CHILD_RECURSE, 0, mode);
                }
                mode = MODE_SLASH;
            }
            else if (char === ' ' || char === '\t' || char === '\n' || char === '\r') {
                // <a disabled>
                commit();
                mode = MODE_WHITESPACE;
            }
            else {
                buffer += char;
            }
            if (mode === MODE_TAGNAME && buffer === '!--') {
                mode = MODE_COMMENT;
                current = current[0];
            }
        }
    }
    commit();
    if (constants_1.MINI) {
        return current.length > 2 ? current.slice(1) : current[1];
    }
    return current;
};
exports.build = build;


/***/ }),

/***/ "./src/htm/constants.ts":
/*!******************************!*\
  !*** ./src/htm/constants.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MINI = void 0;
exports.MINI = false;


/***/ }),

/***/ "./src/htm/index.ts":
/*!**************************!*\
  !*** ./src/htm/index.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const constants_1 = __webpack_require__(/*! ./constants */ "./src/htm/constants.ts");
const build_1 = __webpack_require__(/*! ./build */ "./src/htm/build.ts");
const CACHES = new Map();
const regular = function (statics) {
    // @ts-ignore
    let tmp = CACHES.get(this);
    if (!tmp) {
        tmp = new Map();
        // @ts-ignore
        CACHES.set(this, tmp);
    }
    // @ts-ignore
    tmp = build_1.evaluate(this, tmp.get(statics) || (tmp.set(statics, (tmp = build_1.build(statics))), tmp), arguments, []);
    return tmp.length > 1 ? tmp : tmp[0];
};
// export as htm
exports.default = constants_1.MINI ? build_1.build : regular;


/***/ }),

/***/ "./src/jsx.ts":
/*!********************!*\
  !*** ./src/jsx.ts ***!
  \********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.jsx = void 0;
const core_1 = __webpack_require__(/*! ./core */ "./src/core.ts");
const htm_1 = __importDefault(__webpack_require__(/*! ./htm */ "./src/htm.ts"));
const jsx = htm_1.default.bind(core_1.h);
exports.jsx = jsx;


/***/ }),

/***/ "./src/lazy.ts":
/*!*********************!*\
  !*** ./src/lazy.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hydrateLazy = void 0;
const core_1 = __webpack_require__(/*! ./core */ "./src/core.ts");
const visible_1 = __webpack_require__(/*! ./components/visible */ "./src/components/visible.ts");
const hydrateLazy = (component, parent = null, removeChildNodes = true) => {
    const c = core_1.h(visible_1.Visible, null, component);
    return core_1.hydrate(c, parent, removeChildNodes);
};
exports.hydrateLazy = hydrateLazy;


/***/ }),

/***/ "./src/state.ts":
/*!**********************!*\
  !*** ./src/state.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._clearState = exports._state = void 0;
/** Holds the state of the whole application. */
exports._state = new Map();
/** Clears the state of the whole application. */
const _clearState = () => {
    exports._state.clear();
};
exports._clearState = _clearState;


/***/ }),

/***/ "./src/store.ts":
/*!**********************!*\
  !*** ./src/store.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Store = void 0;
class Store {
    /**
     * Create your own Store.
     * @param defaultState Pass the initial State.
     * @param name The name of the Store (only required if you persist the state in localStorage or sessionStorage).
     * @param storage Pass 'memory', 'local' or 'session'.
     */
    constructor(defaultState, name = '', storage = 'memory') {
        this._listeners = new Map();
        if (typeof isSSR !== 'undefined')
            storage = 'memory';
        this._id = name;
        this._storage = storage;
        this._state = this._prevState = defaultState;
        if (storage === 'memory' || !storage)
            return;
        const Storage = storage === 'local' ? localStorage : sessionStorage;
        // get/set initial state of Storage
        const item = Storage.getItem(this._id);
        if (item) {
            this._state = this._prevState = JSON.parse(item);
        }
        else
            Storage.setItem(this._id, JSON.stringify(defaultState));
    }
    persist(newState) {
        if (this._storage === 'memory')
            return;
        const Storage = this._storage === 'local' ? localStorage : sessionStorage;
        Storage.setItem(this._id, JSON.stringify(newState));
    }
    /** Clears the state of the whole store. */
    clear() {
        this._state = this._prevState = undefined;
        if (this._storage === 'local')
            localStorage.removeItem(this._id);
        else if (this._storage === 'session')
            sessionStorage.removeItem(this._id);
    }
    setState(newState) {
        this.state = newState;
    }
    set state(newState) {
        this._prevState = this._state;
        this._state = newState;
        this.persist(newState);
        this._listeners.forEach(fnc => {
            fnc(this._state, this._prevState);
        });
    }
    get state() {
        return this._state;
    }
    use() {
        const id = Math.random().toString(36).substr(2, 9);
        const _this = this;
        return {
            get state() {
                return _this.state;
            },
            setState: (newState) => {
                this.state = newState;
            },
            subscribe: (fnc) => {
                this._listeners.set(id, fnc);
            },
            cancel: () => {
                this._listeners.delete(id);
            }
        };
    }
}
exports.Store = Store;


/***/ }),

/***/ "./src/ui/_config.ts":
/*!***************************!*\
  !*** ./src/ui/_config.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.zIndex = exports.rippleEffect = exports.userSelect = exports.boxShadow = void 0;
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
exports.boxShadow = `
  -webkit-box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2), 0px 6px 10px 0px rgba(0,0,0,0.14), 0px 1px 18px 0px rgba(0,0,0,0.12);
  -moz-box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2), 0px 6px 10px 0px rgba(0,0,0,0.14), 0px 1px 18px 0px rgba(0,0,0,0.12);
  box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2), 0px 6px 10px 0px rgba(0,0,0,0.14), 0px 1px 18px 0px rgba(0,0,0,0.12);
`;
exports.userSelect = `
  -webkit-touch-callout:none;
  -webkit-user-select:none;
  -khtml-user-select:none;
  -moz-user-select:none;
  -ms-user-select:none;
  user-select:none;
  -webkit-tap-highlight-color:rgba(0,0,0,0);
`;
const rippleEffect = (rippleClr, hoverClr) => {
    const rippleClass = `ripple-${core_1.strToHash(rippleClr + hoverClr)}`;
    const styles = `  
  .${rippleClass} {
    background-position: center;
    transition: background 0.8s;
  }
  
  .${rippleClass}:hover {
    background: ${hoverClr} radial-gradient(circle, transparent 1%, ${hoverClr} 1%) center/15000%;
  }

  
  .${rippleClass}:active {
    background-color: ${rippleClr};
    background-size: 100%;
    transition: background 0s;
  }`;
    return {
        styles,
        class: rippleClass
    };
};
exports.rippleEffect = rippleEffect;
exports.zIndex = {
    button: 'unset;',
    banner: '50;',
    bar: '100;',
    navigation: '100;',
    fab: '200;',
    sheet: '300;',
    menu: '400;',
    snackbar: '500;',
    dialog: '600;'
};


/***/ }),

/***/ "./src/ui/_helpers.ts":
/*!****************************!*\
  !*** ./src/ui/_helpers.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addStylesToHead = exports.lightenColor = void 0;
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
// https://gist.github.com/renancouto/4675192
const lightenColor = (color, percent) => {
    const num = parseInt(color.replace('#', ''), 16), amt = Math.round(2.55 * percent), R = (num >> 16) + amt, B = ((num >> 8) & 0x00ff) + amt, G = (num & 0x0000ff) + amt;
    return `#${(0x1000000 +
        (R < 255 ? (R < 1 ? 0 : R) : 255) * 0x10000 +
        (B < 255 ? (B < 1 ? 0 : B) : 255) * 0x100 +
        (G < 255 ? (G < 1 ? 0 : G) : 255))
        .toString(16)
        .slice(1)}`;
};
exports.lightenColor = lightenColor;
const addStylesToHead = (styles, hash) => {
    const el = document.querySelector(`[data-css-hash*="${hash}"]`);
    if (!el) {
        const styleElement = core_1.h('style', { 'data-css-hash': hash }, styles);
        document.head.appendChild(styleElement);
    }
};
exports.addStylesToHead = addStylesToHead;


/***/ }),

/***/ "./src/ui/appBar.ts":
/*!**************************!*\
  !*** ./src/ui/appBar.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppBar = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const _config_1 = __webpack_require__(/*! ./_config */ "./src/ui/_config.ts");
const classes = {
    container: 'appBar_container',
    scrollingDown: 'appBar_scrolling_down'
};
class AppBar extends component_1.Component {
    constructor() {
        super(...arguments);
        this.curr_scrollY = 0;
        this.last_scrollY = 0;
        this.curr_scrollingState = 'none';
        this.last_scrollingState = 'none';
    }
    calcScrollPosition() {
        this.curr_scrollY = window.scrollY;
        if (this.curr_scrollY > this.last_scrollY) {
            this.curr_scrollingState = 'down';
        }
        else if (this.curr_scrollY < this.last_scrollY) {
            this.curr_scrollingState = 'up';
        }
        this.last_scrollY = this.curr_scrollY;
    }
    scroll() {
        this.calcScrollPosition();
        if (this.curr_scrollY < 1) {
            this.container.classList.remove('appBar_scrolling_down');
        }
        else if (this.last_scrollingState !== this.curr_scrollingState) {
            this.last_scrollingState = this.curr_scrollingState;
            if (this.curr_scrollingState === 'down')
                this.container.classList.add('appBar_scrolling_down');
            else
                this.container.classList.remove('appBar_scrolling_down');
        }
    }
    merge() {
        this.calcScrollPosition();
        if (this.curr_scrollY <= 1) {
            this.container.classList.add('appBar_merged');
        }
        else {
            this.container.classList.remove('appBar_merged');
        }
    }
    didMount() {
        this.curr_scrollY = this.last_scrollY = window.scrollY;
        if (this.props.autoHide)
            window.addEventListener('scroll', () => this.scroll());
        if (this.props.autoMerge)
            window.addEventListener('scroll', () => this.merge());
    }
    didUnmount() {
        if (this.props.autoHide)
            window.removeEventListener('scroll', this.scroll);
        if (this.props.autoMerge)
            window.removeEventListener('scroll', () => this.merge());
    }
    render() {
        const { background = '#6200EE', color = 'white' } = this.props;
        const styles = `
    .appBar_container {
      background: ${background};
      color: ${color};
      font-weight: 500;

      z-index: ${_config_1.zIndex.bar}

      position: fixed;
      top: 0;
      left: 0;
      min-height: 24px;
      width: 100vw;


      ${_config_1.boxShadow}

      transition: top 0.2s, -webkit-box-shadow 0.5s, -moz-box-shadow 0.5s, box-shadow 0.5s;
    }

    .appBar_container.appBar_scrolling_down {
      top: -56px;
    }

    .appBar_container.appBar_merged {
      -webkit-box-shadow: none;
      -moz-box-shadow: none;
      box-shadow: none;
    }

    .appBar_container .toolbar_container {
      display: flex;
      justify-content: space-between;
    }

    .appBar_container .toolbar_container,
    .appBar_container .tabs_container {
      margin: 0 auto;
      ${this.props.maxWidth ? `max-width: ${this.props.maxWidth}px;` : ''}
    }

    .appBar_container .toolbar_container .toolbar_left,
    .appBar_container .toolbar_container .toolbar_right {
      display: flex;
      align-items: center;      
    }

    .appBar_container .toolbar_title {
      font-size: 20px;
    }
    `;
        document.head.appendChild(core_1.h('style', {}, styles));
        const mergedClass = this.props.autoMerge ? 'appBar_merged' : '';
        // @ts-ignore
        this.container = core_1.h('div', { class: `${classes.container} ${mergedClass}` }, this.props.children);
        return this.container;
    }
}
exports.AppBar = AppBar;


/***/ }),

/***/ "./src/ui/button.ts":
/*!**************************!*\
  !*** ./src/ui/button.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Button = void 0;
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const _config_1 = __webpack_require__(/*! ./_config */ "./src/ui/_config.ts");
const _helpers_1 = __webpack_require__(/*! ./_helpers */ "./src/ui/_helpers.ts");
const icon_1 = __webpack_require__(/*! ./icon */ "./src/ui/icon.ts");
const Button = (props) => {
    const { children, outlined = false, text = false, background = '#6200ee', color = '#ffffff', style = '', class: className = '', icon } = props, rest = __rest(props, ["children", "outlined", "text", "background", "color", "style", "class", "icon"]);
    const normal = !(outlined || text);
    const bg = normal ? background : '#ffffff';
    const clr = normal ? color : background;
    const hoverClr = normal ? _helpers_1.lightenColor(bg, 10) : _helpers_1.lightenColor(bg, -10);
    const rippleClr = normal ? _helpers_1.lightenColor(bg, 50) : _helpers_1.lightenColor(background, 50);
    const cssHash = core_1.strToHash(outlined.toString() + text.toString() + bg + clr + style);
    const ripple = _config_1.rippleEffect(rippleClr, hoverClr);
    const styles = `
    .nano_jsx_button-${cssHash} {
      color: ${clr};
      background: ${bg};
      border-radius: 4px;
      display: inline-block;
      font-size: 14px;
      padding: 10px 16px;
      margin: 0px 0px 1em 0px;
      text-align: center;
      cursor: pointer;

      ${_config_1.userSelect}
      

      z-index: ${_config_1.zIndex.button}

      ${_config_1.boxShadow}

      border: none;
      text-transform: uppercase;
      box-shadow: 0 0 4px #999;
      outline: none;
    }

    ${ripple.styles}
  `;
    _helpers_1.addStylesToHead(styles, cssHash);
    let customStyles = '';
    if (outlined || text) {
        customStyles += 'padding-top: 9px; padding-bottom: 9px; ';
        customStyles += '-webkit-box-shadow: none; -moz-box-shadow: none; box-shadow none; ';
        if (outlined)
            customStyles += `border: 1px ${clr} solid; `;
    }
    customStyles += style;
    return core_1.h('a', Object.assign({ class: `nano_jsx_button-${cssHash} ${ripple.class} ${className}`, style: customStyles }, rest), icon ? core_1.h(icon_1.Icon, { style: 'margin-left: -4px; margin-right: 8px; width: 14px; height: 14px;' }, icon) : null, children);
};
exports.Button = Button;


/***/ }),

/***/ "./src/ui/dialog.ts":
/*!**************************!*\
  !*** ./src/ui/dialog.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dialog = void 0;
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const _config_1 = __webpack_require__(/*! ./_config */ "./src/ui/_config.ts");
const button_1 = __webpack_require__(/*! ./button */ "./src/ui/button.ts");
class Dialog {
    constructor(options = {}) {
        this.options = options;
        this.defaultParentId = 'dialog_container';
        this.defaultActionColor = '#6200EE';
        const defaultOptions = {
            title: 'Dialog Title',
            body: 'Dialog body text.',
            actions: [
                { name: 'Action 1', color: this.defaultActionColor },
                { name: 'Action 2', color: this.defaultActionColor }
            ]
        };
        this.options = Object.assign(Object.assign({}, defaultOptions), options);
        // styles
        const styles = `
    #dialog_container {  
      background: #00000070;
      position: fixed;
      bottom: 0px;
      left: 0px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      width: 100vw;
      height: 100vh;
      overflow: hidden;
      
      z-index: ${_config_1.zIndex.dialog}

      animation-name: dialog-fadein;
      animation-duration: 0.2s;

      transition: opacity 0.2s;
      opacity: 1;
    }

    #dialog_container.dialog_fadeout {
      opacity: 0;
    } 

    #dialog_container .dialog {
      background-color: white;
      border-radius: 4px;
      min-width: 240px;
      max-width: min(500px, 80%);

      margin: 8px;

      ${_config_1.boxShadow}
    }

    #dialog_container .dialog .dialog_header {
      color: #000000DE;
      font-size: 20px;
      padding: 0px 24px 9px;
      margin: 24px 0px 6px 0px;
      line-height: 1;
    }

    #dialog_container .dialog .dialog_body {
      color: #00000099;
      font-size: 16px;  
      padding: 0px 24px 20px;
      line-height: 1.5em;
    }

    #dialog_container .dialog .dialog_actions {
      
      margin: 0;
      padding: 8px;
      
      display: flex;
      flex-direction: row;
      align-items: flex-end;
      float: right;

      flex-wrap: wrap;
      justify-content: flex-end;
    }

    #dialog_container .dialog .dialog_action {
      margin-bottom: 0px;
      margin-left: 10px;
    }

    /*#dialog_container .dialog .dialog_action:hover {
      border-radius: 4px;      
      background: #0000000a;
    }*/

    @keyframes dialog-fadein {
      from {opacity: 0;}
      to {opacity: 1;}
    }
    `;
        document.head.appendChild(core_1.h('style', {}, styles));
    }
    getParentElement(parentId) {
        let el = document.getElementById(parentId || this.defaultParentId);
        if (!el) {
            el = document.createElement('div');
            el.id = this.defaultParentId;
            document.body.appendChild(el);
        }
        return el;
    }
    remove() {
        const el = document.getElementById('dialog_container');
        if (!el)
            return;
        el.classList.add('dialog_fadeout');
        setTimeout(() => el.remove(), 200);
    }
    show(options, callback) {
        options = Object.assign(Object.assign({}, this.options), options);
        const container = this.getParentElement(options.parentId || this.defaultParentId);
        if (container.hasChildNodes())
            return;
        const Dialog = (_header, _body, _actions) => {
            const actionsArray = _actions.map((action) => {
                return core_1.h(button_1.Button, {
                    text: true,
                    color: action.color || this.defaultActionColor,
                    class: 'dialog_action',
                    // style: `color: ${action.color || this.defaultActionColor}`,
                    onClick: () => {
                        callback({ name: action.name, id: action.id });
                        this.remove();
                    }
                }, action.name.toUpperCase());
            });
            const title = core_1.h('h2', { class: 'dialog_header' }, _header);
            const body = core_1.h('div', { class: 'dialog_body' }, _body);
            const actions = core_1.h('div', { class: 'dialog_actions' }, actionsArray);
            const dialog = core_1.h('div', { class: 'dialog' }, title, body, actions);
            return dialog;
        };
        const el = Dialog(options.title, options.body, options.actions || []);
        container.appendChild(el);
        const dialog = document.getElementsByClassName('dialog')[0];
        const actions = document.getElementsByClassName('dialog_actions')[0];
        // if the actions are too long, we prefer to set flex-direction to column than to wrap the single actions
        const useColumn = dialog.clientWidth <= actions.clientWidth;
        if (useColumn)
            actions.setAttribute('style', 'flex-direction: column;');
    }
}
exports.Dialog = Dialog;


/***/ }),

/***/ "./src/ui/fab.ts":
/*!***********************!*\
  !*** ./src/ui/fab.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Fab = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const _config_1 = __webpack_require__(/*! ./_config */ "./src/ui/_config.ts");
const _helpers_1 = __webpack_require__(/*! ./_helpers */ "./src/ui/_helpers.ts");
class Fab extends component_1.Component {
    render() {
        const { background = '#6200EE', color = 'white', extended = false, mini = false, center = false, left = false, onClick = () => { } } = this.props;
        const height = mini ? 40 : extended ? 48 : 56;
        const cssHash = core_1.strToHash(extended.toString() + mini.toString() + center.toString() + left.toString()); // Math.random().toString(36).substr(2, 9)
        const className = `fab-container-${cssHash}`;
        const styles = `
      .${className} {
        ${mini ? 'width: 40px;' : extended ? 'padding: 0px 12px;' : 'width: 56px;'}
        height: ${height}px;
        position: fixed;
        background: ${background};
        border-radius: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: ${color};
        cursor: pointer;

        z-index: ${_config_1.zIndex.fab}
        bottom: ${this.props.offsetY ? 16 + this.props.offsetY : 16}px;        
        ${left ? 'left: 16px;' : 'right: 16px;'}
        ${center ? 'transform: translateX(50%); right: 50%;' : ''}
        ${_config_1.boxShadow}
        ${_config_1.userSelect}
      }
    `;
        _helpers_1.addStylesToHead(styles, cssHash);
        const { children } = this.props;
        return core_1.h('div', { class: className, onClick: (e) => onClick(e) }, children);
    }
}
exports.Fab = Fab;


/***/ }),

/***/ "./src/ui/icon.ts":
/*!************************!*\
  !*** ./src/ui/icon.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Icon = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const _helpers_1 = __webpack_require__(/*! ./_helpers */ "./src/ui/_helpers.ts");
class Icon extends component_1.Component {
    didUnmount() {
        // not sure if I want to remove the css, since there might be another Icon with the same styles.
        // const el = document.querySelector(`[data-css-hash*="${this.cssHash}"]`)
        // if (el) el.remove()
    }
    render() {
        const _a = this.props, { src, size = 16, active = true, color = '#6204EE', style = '' } = _a, rest = __rest(_a, ["src", "size", "active", "color", "style"]);
        // @ts-ignore
        const children = this.props.children;
        this.cssHash = core_1.strToHash(active + color + size.toString());
        const colors = {
            active: color,
            inactive: '#00000070'
        };
        const styles = `
    i.icon-${this.cssHash} {
      width: ${size}px;
      height: ${size}px;
      display: inline-block;
      content: '';

      /*-webkit-mask: url(YOUR_SVG_URL) no-repeat 50% 50%;
      mask: url(YOUR_SVG_URL) no-repeat 50% 50%;*/

      -webkit-mask-size: cover;
      mask-size: cover; 

      background-color: ${colors.active};
    }

    i.icon-${this.cssHash}.icon_inactive-${this.cssHash} {
      background-color: ${colors.inactive};
    }
    `;
        _helpers_1.addStylesToHead(styles, this.cssHash);
        // const iconStyle = `-webkit-mask: url(/dev/font-awesome/ellipsis-v-solid.svg) no-repeat 50% 50%;mask: url(/dev/font-awesome/ellipsis-v-solid.svg) no-repeat 50% 50%;`
        const iconStyle = `-webkit-mask: url(${src || children}) no-repeat 50% 50%; mask: url(${src || children}) no-repeat 50% 50%;`;
        const classes = [`icon-${this.cssHash}`];
        if (!active)
            classes.push(`icon_inactive-${this.cssHash}`);
        const icon = core_1.h('i', Object.assign(Object.assign({ class: classes.join(' ') }, rest), { style: iconStyle + style }));
        return icon;
    }
}
exports.Icon = Icon;


/***/ }),

/***/ "./src/ui/index.ts":
/*!*************************!*\
  !*** ./src/ui/index.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tab = exports.Tabs = exports.Snackbar = exports.Menu = exports.ListItem = exports.List = exports.Icon = exports.Fab = exports.Dialog = exports.Button = exports.NavigationAction = exports.Navigation = exports.Toolbar = exports.AppBar = void 0;
var appBar_1 = __webpack_require__(/*! ../ui/appBar */ "./src/ui/appBar.ts");
Object.defineProperty(exports, "AppBar", ({ enumerable: true, get: function () { return appBar_1.AppBar; } }));
var toolbar_1 = __webpack_require__(/*! ../ui/toolbar */ "./src/ui/toolbar.ts");
Object.defineProperty(exports, "Toolbar", ({ enumerable: true, get: function () { return toolbar_1.Toolbar; } }));
var navigation_1 = __webpack_require__(/*! ../ui/navigation */ "./src/ui/navigation.ts");
Object.defineProperty(exports, "Navigation", ({ enumerable: true, get: function () { return navigation_1.Navigation; } }));
Object.defineProperty(exports, "NavigationAction", ({ enumerable: true, get: function () { return navigation_1.NavigationAction; } }));
var button_1 = __webpack_require__(/*! ../ui/button */ "./src/ui/button.ts");
Object.defineProperty(exports, "Button", ({ enumerable: true, get: function () { return button_1.Button; } }));
var dialog_1 = __webpack_require__(/*! ../ui/dialog */ "./src/ui/dialog.ts");
Object.defineProperty(exports, "Dialog", ({ enumerable: true, get: function () { return dialog_1.Dialog; } }));
var fab_1 = __webpack_require__(/*! ../ui/fab */ "./src/ui/fab.ts");
Object.defineProperty(exports, "Fab", ({ enumerable: true, get: function () { return fab_1.Fab; } }));
var icon_1 = __webpack_require__(/*! ../ui/icon */ "./src/ui/icon.ts");
Object.defineProperty(exports, "Icon", ({ enumerable: true, get: function () { return icon_1.Icon; } }));
var list_1 = __webpack_require__(/*! ../ui/list */ "./src/ui/list.ts");
Object.defineProperty(exports, "List", ({ enumerable: true, get: function () { return list_1.List; } }));
Object.defineProperty(exports, "ListItem", ({ enumerable: true, get: function () { return list_1.ListItem; } }));
var menu_1 = __webpack_require__(/*! ../ui/menu */ "./src/ui/menu.ts");
Object.defineProperty(exports, "Menu", ({ enumerable: true, get: function () { return menu_1.Menu; } }));
var snackbar_1 = __webpack_require__(/*! ../ui/snackbar */ "./src/ui/snackbar.ts");
Object.defineProperty(exports, "Snackbar", ({ enumerable: true, get: function () { return snackbar_1.Snackbar; } }));
var tabs_1 = __webpack_require__(/*! ../ui/tabs */ "./src/ui/tabs.ts");
Object.defineProperty(exports, "Tabs", ({ enumerable: true, get: function () { return tabs_1.Tabs; } }));
Object.defineProperty(exports, "Tab", ({ enumerable: true, get: function () { return tabs_1.Tab; } }));


/***/ }),

/***/ "./src/ui/list.ts":
/*!************************!*\
  !*** ./src/ui/list.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.List = exports.ListItem = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const icon_1 = __webpack_require__(/*! ./icon */ "./src/ui/icon.ts");
const _helpers_1 = __webpack_require__(/*! ./_helpers */ "./src/ui/_helpers.ts");
class ListItem extends component_1.Component {
    render() {
        const { props: p } = this;
        const { onClick = () => { } } = p;
        const adjustedMargin = 'margin-right: 16px;';
        const icon = p.icon ? core_1.h(icon_1.Icon, { size: 20, style: 'margin-right: 32px;', src: p.icon }) : null;
        const avatar = p.avatar
            ? core_1.h('img', { src: p.avatar, width: 40, height: 40, style: `border-radius: 20px; ${adjustedMargin}` })
            : null;
        const square = p.square ? core_1.h('img', { src: p.square, width: 56, height: 56, style: adjustedMargin }) : null;
        const image = p.image
            ? core_1.h('img', { src: p.image, width: 100, height: 56, style: 'margin-left: -16px; margin-right: 16px;' })
            : null;
        const text = core_1.h('span', null, p.children);
        // additional style for the list item
        let style = '';
        if (p.icon || p.avatar)
            style += 'min-height: 56px; ';
        if (p.square || p.image)
            style += 'min-height: 72px; ';
        return core_1.h('li', { style, onClick }, icon, avatar, square, image, text);
    }
}
exports.ListItem = ListItem;
class List extends component_1.Component {
    render() {
        const { small = false } = this.props;
        this.cssHash = core_1.strToHash(`List${small.toString()}`);
        const styles = `
      .list-${this.cssHash} ul {
        margin: 0px;
        padding: 8px 16px;
      }

      .list-${this.cssHash} ul li {
        list-style: none;
        min-height: ${small ? 32 : 46}px;
        display: flex;
        align-items: center;
        margin: 0px -16px;
        padding: 0px 16px;
        cursor: pointer;
      }

      .list-${this.cssHash} ul li span {
        font-size: 16px;
      }

      .list-${this.cssHash} ul li:hover  {
        background:#00000010
      }    
    `;
        _helpers_1.addStylesToHead(styles, this.cssHash);
        const ul = core_1.h('ul', null, this.props.children);
        return core_1.h('div', { class: `list-${this.cssHash}` }, ul);
    }
}
exports.List = List;


/***/ }),

/***/ "./src/ui/menu.ts":
/*!************************!*\
  !*** ./src/ui/menu.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Menu = void 0;
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const _config_1 = __webpack_require__(/*! ./_config */ "./src/ui/_config.ts");
const _helpers_1 = __webpack_require__(/*! ./_helpers */ "./src/ui/_helpers.ts");
class Menu {
    constructor() {
        this.defaultParentId = 'menu_items_container';
        this.cssHash = Math.random().toString(36).substr(2, 9);
    }
    didUnmount() {
        const el = document.querySelector(`[data-css-hash*="${this.cssHash}"]`);
        if (el)
            el.remove();
    }
    getParentElement(id) {
        // delete all other
        const others = document.querySelectorAll(`[id^="${this.defaultParentId}"]`);
        others.forEach(e => {
            e.remove();
        });
        let el = document.getElementById(`${this.defaultParentId}-${id}`);
        if (!el) {
            el = document.createElement('div');
            el.id = `${this.defaultParentId}-${id}`;
        }
        core_1.removeAllChildNodes(el);
        document.body.appendChild(el);
        return el;
    }
    close() {
        core_1.removeAllChildNodes(this.getParentElement(this.cssHash));
    }
    open(menuOptions) {
        const { position, list } = menuOptions;
        // check in which corner the menu appears and adjust fixed position.
        const left = position.x < window.innerWidth / 2 ? 'left' : 'right';
        const top = position.y < window.innerHeight / 2 ? 'top' : 'bottom';
        const styles = `
   
    #menu_items_background-${this.cssHash} {
      width: 100vw;
      height: 100vh;
      background: transparent;
      position: fixed;
      top: 0;
      left: 0;
      z-index: ${_config_1.zIndex.menu}      
    }
   
    #menu_items_list-${this.cssHash} {
      position: fixed;
      background: white;
      
      border-radius: 4px;
      min-width: 112px;

      ${top}: ${position.y > window.innerHeight / 2 ? window.innerHeight - position.y : position.y}px;
      ${left}: ${position.x > window.innerWidth / 2 ? window.innerWidth - position.x : position.x}px;

      z-index: ${_config_1.zIndex.menu}

      ${_config_1.boxShadow}
    }

    `;
        // remove old styles
        const el = document.querySelector(`[data-css-hash*="${this.cssHash}"]`);
        if (el)
            el.remove();
        // add new styles
        _helpers_1.addStylesToHead(styles, this.cssHash);
        const itemsList = core_1.h('div', { id: `menu_items_list-${this.cssHash}` }, list);
        const itemsBg = core_1.h('div', { onClick: () => this.close(), id: `menu_items_background-${this.cssHash}` }, itemsList);
        itemsList.addEventListener('click', (e) => e.stopPropagation());
        this.getParentElement(this.cssHash).appendChild(core_1.render(itemsBg));
    }
}
exports.Menu = Menu;


/***/ }),

/***/ "./src/ui/navigation.ts":
/*!******************************!*\
  !*** ./src/ui/navigation.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Navigation = exports.NavigationAction = void 0;
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const _config_1 = __webpack_require__(/*! ./_config */ "./src/ui/_config.ts");
const icon_1 = __webpack_require__(/*! ./icon */ "./src/ui/icon.ts");
const classes = {
    label: 'bottom_navigation_label',
    action: 'bottom_navigation_action',
    idPrefix: 'bottom_navigation_action_id-',
    inactive: 'bottom_navigation_action_inactive',
    initialActive: 'bottom_navigation_label_initial_active'
};
class NavigationAction extends component_1.Component {
    willMount() {
        var _a;
        this.id = (_a = this.props.id) !== null && _a !== void 0 ? _a : this.props.label.toLowerCase().replace(/\s/gm, '-').replace(/[-]+/gm, '-');
    }
    render() {
        const label = core_1.h('span', { class: classes.label }, this.props.label);
        const actionClasses = [classes.action];
        console.log(this.props.active);
        if (this.props.active)
            actionClasses.push(classes.initialActive);
        else
            actionClasses.push(classes.inactive);
        return core_1.h('div', {
            id: `${classes.idPrefix}${this.id}`,
            class: actionClasses.join(' '),
            onClick: () => {
                var _a, _b;
                if (this.props.link)
                    window.location.href = this.props.link;
                (_b = (_a = this.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, { navigate: !!this.props.link, id: this.id, label: this.props.label, component: this });
            }
        }, this.props.icon ? core_1.h(icon_1.Icon, { size: 22, style: 'margin-bottom: 2px;', src: this.props.icon }) : null, label);
    }
}
exports.NavigationAction = NavigationAction;
class Navigation extends component_1.Component {
    didMount() {
        const children = this.props.children;
        children.forEach(c => {
            c.props.onClick = e => {
                if (e.navigate)
                    return;
                const elements = document.querySelectorAll(`[id^="${classes.idPrefix}"]`);
                elements.forEach(el => {
                    if (el.id === `${classes.idPrefix}${e.id}`)
                        el.classList.remove(classes.inactive);
                    else
                        el.classList.add(classes.inactive);
                });
            };
        });
    }
    render() {
        const colors = {
            active: '#6204EE',
            inactive: '#00000070'
        };
        const styles = `
      #bottom_navigation_container {

        background-color: white;
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100vw;
        min-height: 56px;

        z-index: ${_config_1.zIndex.navigation}

        display: flex;
        justify-content: center;
        
        ${_config_1.boxShadow}
      } 

      #bottom_navigation_container .bottom_navigation_label {
        transition: font-size 0.2s;
      }

      #bottom_navigation_container .bottom_navigation_label_initial_active .bottom_navigation_label{
        animation-name: bottom_navigation_label_fontsize;
        animation-duration: 0.2s;
      }

      @keyframes bottom_navigation_label_fontsize {
        from {font-size: 12px;}
        to {font-size: 14px;}
      }

      #bottom_navigation_container .bottom_navigation_action {
        color: ${colors.active};
        font-size: 14px;

        min-width: 80px;
        max-width: 168px;
        flex-grow: 1;

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        cursor: pointer;
      }

      #bottom_navigation_container .bottom_navigation_action_inactive{
        color: ${colors.inactive};
        font-size: 12px;
      }

      #bottom_navigation_container .bottom_navigation_action_inactive i {
        background-color: ${colors.inactive}
      }
    `;
        document.head.appendChild(core_1.h('style', {}, styles));
        const { parentId, children } = this.props;
        const navigation = core_1.h('div', { id: 'bottom_navigation_container' }, children);
        if (parentId) {
            const parent = document.getElementById(parentId);
            if (parent) {
                parent.appendChild(navigation);
                return;
            }
        }
        return navigation;
    }
}
exports.Navigation = Navigation;


/***/ }),

/***/ "./src/ui/snackbar.ts":
/*!****************************!*\
  !*** ./src/ui/snackbar.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Snackbar = void 0;
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const _config_1 = __webpack_require__(/*! ./_config */ "./src/ui/_config.ts");
class Snackbar {
    constructor(options = {}) {
        this.options = options;
        this.defaultParentId = 'snackbar_container';
        this.defaultActionColor = '#BC86FC';
        const defaultOptions = {
            message: 'Hello Snack!',
            actions: [{ name: 'Dismiss', color: this.defaultActionColor }],
            autoHide: true,
            consecutive: true,
            offsetY: 0
        };
        this.options = Object.assign(Object.assign({}, defaultOptions), options);
        // styles
        const styles = `
      #snackbar_container {    
        position: fixed;
        bottom: ${this.options.offsetY}px;
        left: 0px;
        overflow: hidden;
        z-index: ${_config_1.zIndex.snackbar}
      }

      #snackbar_container .snackbar_snack {
        background-color: #323232;

        padding: 16px 16px 16px 16px;
        margin: 0px 8px 8px 8px;

        border-radius: 4px;
        width: 344px;
        max-width: calc(100vw - 16px);
        box-sizing: border-box;
        display: flex;
        justify-content: space-between;
        height: fit-content;
        overflow: hidden;

        ${_config_1.boxShadow}

        animation-name: snackbar-fadein;
        animation-duration: 0.2s;

        transition: opacity 0.2s;
        opacity: 1;
      }

      #snackbar_container .snackbar_snack_fadeout {
        opacity: 0;
      } 

      #snackbar_container .snackbar_snack .snackbar_message {
        color: #DFDFDF;
        font-size: 16px;
        align-self: center;
      }

      #snackbar_container .snackbar_snack .snackbar_actions {
        align-self: center;
      }

      #snackbar_container .snackbar_snack .snackbar_action {
        font-size: 16px;
        cursor: pointer;
        padding: 8px;
        margin-right: -8px;
      }

      @keyframes snackbar-fadein {
        from {opacity: 0;}
        to {opacity: 1;}
      }
    `;
        document.head.appendChild(core_1.h('style', {}, styles));
    }
    getParentElement(parentId) {
        let el = document.getElementById(parentId || this.defaultParentId);
        if (!el) {
            el = document.createElement('div');
            el.id = this.defaultParentId;
            document.body.appendChild(el);
        }
        return el;
    }
    remove(el) {
        el.classList.add('snackbar_snack_fadeout');
        setTimeout(() => el.remove(), 200);
    }
    show(options, callback) {
        if (this.options.consecutive) {
            const snacks = document.querySelectorAll('.snackbar_snack');
            snacks.forEach(s => this.remove(s));
            if (snacks.length > 0)
                setTimeout(() => this._show(options, callback), 200 + 20);
            else
                this._show(options, callback);
            return;
        }
        this._show(options, callback);
    }
    _show(options, callback) {
        options = Object.assign(Object.assign({}, this.options), options);
        const container = this.getParentElement(options.parentId || this.defaultParentId);
        const Snack = (_message, _actions) => {
            const actionsArray = _actions.map((action) => {
                return core_1.h('a', {
                    class: 'snackbar_action',
                    style: `color: ${action.color || this.defaultActionColor}`,
                    onClick: () => {
                        callback({ name: action.name, id: action.id });
                        this.remove(el);
                    }
                }, action.name.toUpperCase());
            });
            const message = core_1.h('div', { class: 'snackbar_message' }, _message);
            const actions = core_1.h('div', { class: 'snackbar_actions' }, actionsArray);
            const snack = core_1.h('div', { class: 'snackbar_snack' }, message, actions);
            return snack;
        };
        const el = Snack(options.message, options.actions || []);
        // autoHide options
        if (options.autoHide === true)
            setTimeout(() => this.remove(el), 5000);
        else if (typeof options.autoHide === 'number')
            setTimeout(() => this.remove(el), options.autoHide);
        container.appendChild(el);
    }
}
exports.Snackbar = Snackbar;


/***/ }),

/***/ "./src/ui/tabs.ts":
/*!************************!*\
  !*** ./src/ui/tabs.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tabs = exports.Tab = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const _config_1 = __webpack_require__(/*! ./_config */ "./src/ui/_config.ts");
const _helpers_1 = __webpack_require__(/*! ./_helpers */ "./src/ui/_helpers.ts");
const Tab = (props) => {
    const classes = [props.itemClass, props.rippleClass];
    if (props.active)
        classes.push('active');
    const link = props.href ? { href: props.href } : {};
    const a = core_1.h('a', Object.assign({}, link), props.children);
    return core_1.h('li', { class: classes.join(' ') }, a);
};
exports.Tab = Tab;
class Tabs extends component_1.Component {
    constructor() {
        super(...arguments);
        this.active = this.props.active || 0;
    }
    didMount() {
        const adjustLine = (item) => {
            var _a;
            if (!item)
                return;
            const first = this.items[0].getBoundingClientRect();
            const active = item.getBoundingClientRect();
            this.line.style.left = `${active.x - first.x}px`;
            this.line.style.width = `${active.width}px`;
            // disable old
            (_a = document.querySelector('.tabs_item.active')) === null || _a === void 0 ? void 0 : _a.classList.remove('active');
            // enable new
            item.classList.add('active');
        };
        const scrollIntoView = (item) => {
            if (!this.props.scroll)
                return;
            item.scrollIntoView({
                behavior: 'smooth',
                block: 'center',
                inline: 'center'
            });
        };
        core_1.tick(() => {
            adjustLine(this.items[this.active]);
            scrollIntoView(this.items[this.active]);
        });
        for (let i = 0; i < this.items.length; i++) {
            const item = this.items[i];
            item.addEventListener('click', () => {
                this.active = i;
                // looks hacky, but works well :)
                setTimeout(() => adjustLine(item), 50);
                setTimeout(() => adjustLine(item), 100);
                setTimeout(() => adjustLine(item), 150);
                // does not work in safari
                scrollIntoView(item);
            });
        }
    }
    render() {
        var _a;
        const ripple = _config_1.rippleEffect('#ffffff70', '#5902db');
        const { scroll = false, children, active } = this.props;
        const cssHash = core_1.strToHash(scroll.toString() + (children === null || children === void 0 ? void 0 : children.length) + active + ripple.class);
        const styles = `
      .tabs_container-${cssHash} {
        background: #6204ee;

        width: 100%;
        height: 48px;

        overflow-x: ${this.props.scroll ? 'scroll' : 'hidden'};
        overflow-y: hidden;

        ${_config_1.userSelect}
      }

      /* Hide scrollbar for Chrome, Safari and Opera */
      .tabs_container-${cssHash}::-webkit-scrollbar {
        display: none;
      }

      /* Hide scrollbar for IE, Edge and Firefox */
      .tabs_container-${cssHash} {
        -ms-overflow-style: none; /* IE and Edge */
        scrollbar-width: none; /* Firefox */
      }

      .tabs_list-${cssHash} {
        ${!this.props.scroll ? 'display: flex; justify-content: space-evenly;' : ''}

        height: 100%;
        display: flex;
        list-style-type: none;
        margin: 0;
        padding: 0;
        cursor: pointer;
      }

      .tabs_item-${cssHash} {
        ${!this.props.scroll ? 'width: 100%; text-align: center;' : ''}

        padding-top: 16px;
        font-size: 14px;
        text-transform: uppercase;
        color: rgba(255, 255, 255, 0.75);
        transition: color 0.2s;
      }
      
      
      .tabs_item-${cssHash} a {
        font-size: 14px;
        padding: 16px 32px;
        text-decoration: none;
        text-transform: uppercase;
        color: rgba(255, 255, 255, 0.75);
        transition: color 0.2s;
      }

      .tabs_item-${cssHash}.active a {
        color: rgba(255, 255, 255, 1);
      }

      .tabs_item-${cssHash}:active {
        background: #5902db;
      }

      /* if the primary input mechanism system of the device can hover over elements with ease, we use hover */
      @media (hover: hover) {
        .tabs_item-${cssHash}:hover {
          background: #5902db;
        }
      }

      ${ripple.styles}

      .tabs_line-${cssHash} {
        border-bottom: 2px solid white;
        position: relative;
        top: -2px;

        opacity: 0;
        
        left: 50%;
        width: 0px;

        transition: left 0.5s, width 0.5s;

        animation-name: tabs_line_fadein;
        animation-duration: 0.25s;
        animation-delay: 0.25s;
        animation-fill-mode: forwards;
      }
      
      @keyframes tabs_line_fadein {
        from {opacity: 0;}
        to {opacity: 1;}
      }
      `;
        _helpers_1.addStylesToHead(styles, cssHash);
        // set the active tab
        (_a = this.props.children) === null || _a === void 0 ? void 0 : _a.forEach((c, i) => {
            // is active
            if (i === this.active)
                c.props = Object.assign(Object.assign({}, c.props), { active: true });
            // add ripple class
            c.props = Object.assign(Object.assign({}, c.props), { rippleClass: ripple.class, itemClass: `tabs_item-${cssHash}` });
        });
        this.items = core_1.render(this.props.children);
        const list = core_1.h('ul', { class: `tabs_list-${cssHash}` }, this.items);
        this.line = core_1.h('div', { class: `tabs_line-${cssHash}` });
        const container = core_1.h('div', { class: `tabs_container-${cssHash}` }, list, this.line);
        return container;
    }
}
exports.Tabs = Tabs;


/***/ }),

/***/ "./src/ui/toolbar.ts":
/*!***************************!*\
  !*** ./src/ui/toolbar.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Toolbar = void 0;
const component_1 = __webpack_require__(/*! ../component */ "./src/component.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/core.ts");
const classes = {
    bar: 'toolbar_container',
    left: 'toolbar_left',
    right: 'toolbar_right',
    icon: 'toolbar_icon'
};
class Toolbar extends component_1.Component {
    static setTitle(title) {
        const el = document.querySelector('.toolbar_title');
        if (el)
            el.innerText = title;
    }
    render() {
        const styles = `
      .toolbar_container {
        padding: 16px;
      }

      .toolbar_container .toolbar_text {
        font-size: 20px;
        margin-left: 24px;
      }

      .toolbar_container .toolbar_icon {
        width: 22px;
        height: 22px;
        margin-left: 24px;

        display: inline-block;
        content: '';

        /*-webkit-mask: url(YOUR_SVG_URL) no-repeat 50% 50%;
        mask: url(YOUR_SVG_URL) no-repeat 50% 50%;*/

        -webkit-mask-size: cover;
        mask-size: cover; 

        background-color: white;
      }

      .toolbar_navigation_box {
        padding: 4px;
        width: 20px;
        height: 16px;
        margin-right: 32px;
        cursor: pointer;
      }

      .toolbar_hamburger_button,
      .toolbar_hamburger_button::before,
      .toolbar_hamburger_button::after {
        position: absolute;
        width: 20px;
        height: 2px;
        border-radius: 2px;
        background: white;
        content: '';
      }
      .toolbar_hamburger_button::before {
        top: 6px;
      }
      .toolbar_hamburger_button::after {
        top: 12px;
      }

      .toolbar_button_wrapper {
        width: 24px;
        height: 24px;
        padding: 2px;
        position: relative;
        top: -2px;
      }

      .toolbar_back_button,
      .toolbar_back_button::before,
      .toolbar_back_button::after {
        position: relative;
        top: 7px;
        width: 20px;
        height: 2px;
        border-radius: 2px;
        background: white;
        content: '';
      }

      .toolbar_back_button::before {
        position: absolute;
        top: -5px;
        transform: translate3d(-4px,0,0) rotate(-45deg) scaleX(.7);
      }

      .toolbar_back_button::after {
        position: absolute;
        top: 5px;
        transform: translate3d(-4px,0,0) rotate(45deg) scaleX(.7);
      }
    `;
        document.head.appendChild(core_1.h('style', {}, styles));
        const { back = false, actionClick = () => { }, menu } = this.props;
        const navigationAction = menu
            ? core_1.h('div', {
                class: 'toolbar_button_wrapper',
                onClick: actionClick
            }, core_1.h('div', { class: 'toolbar_hamburger_button' }))
            : back
                ? core_1.h('div', {
                    class: 'toolbar_button_wrapper',
                    onClick: actionClick
                }, core_1.h('div', {
                    class: 'toolbar_back_button'
                }))
                : null;
        const navigation = navigationAction ? core_1.h('div', { class: 'toolbar_navigation_box' }, navigationAction) : null;
        const title = this.props.title ? core_1.h('div', { class: 'toolbar_title' }, this.props.title) : null;
        const left = core_1.h('div', { class: classes.left }, navigation, title);
        const right = core_1.h('div', { class: classes.right }, this.props.children);
        const bar = core_1.h('div', { class: classes.bar }, left, right);
        return bar;
    }
}
exports.Toolbar = Toolbar;


/***/ }),

/***/ "./src/version.ts":
/*!************************!*\
  !*** ./src/version.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VERSION = void 0;
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
exports.VERSION = '0.0.19';


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/bundles/bundle.full.ts");
/******/ 	nanoJSX = __webpack_exports__.default;
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,